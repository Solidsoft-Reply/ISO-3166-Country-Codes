// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Solidsoft.Reply.Iso3166.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calculator")]
    public partial class CalculatorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Country.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Calculator", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Country")]
        [NUnit.Framework.TestCaseAttribute("Afghanistan", "Afghanistan (l\')", "AF", "AFG", "004", null)]
        [NUnit.Framework.TestCaseAttribute("Albania", "Albanie (l\')", "AL", "ALB", "008", null)]
        [NUnit.Framework.TestCaseAttribute("Algeria", "Algérie (l\')", "DZ", "DZA", "012", null)]
        [NUnit.Framework.TestCaseAttribute("American Samoa", "Samoa américaines (les)", "AS", "ASM", "016", null)]
        [NUnit.Framework.TestCaseAttribute("Andorra", "Andorre (l\')", "AD", "AND", "020", null)]
        [NUnit.Framework.TestCaseAttribute("Angola", "Angola (l\')", "AO", "AGO", "024", null)]
        [NUnit.Framework.TestCaseAttribute("Anguilla", "Anguilla", "AI", "AIA", "660", null)]
        [NUnit.Framework.TestCaseAttribute("Antarctica", "Antarctique (l\')", "AQ", "ATA", "010", null)]
        [NUnit.Framework.TestCaseAttribute("Antigua and Barbuda", "Antigua-et-Barbuda", "AG", "ATG", "028", null)]
        [NUnit.Framework.TestCaseAttribute("Argentina", "Argentine (l\')", "AR", "ARG", "032", null)]
        [NUnit.Framework.TestCaseAttribute("Armenia", "Arménie (l\')", "AM", "ARM", "051", null)]
        [NUnit.Framework.TestCaseAttribute("Aruba", "Aruba", "AW", "ABW", "533", null)]
        [NUnit.Framework.TestCaseAttribute("Australia", "Australie (l\')", "AU", "AUS", "036", null)]
        [NUnit.Framework.TestCaseAttribute("Austria", "Autriche (l\')", "AT", "AUT", "040", null)]
        [NUnit.Framework.TestCaseAttribute("Azerbaijan", "Azerbaïdjan (l\')", "AZ", "AZE", "031", null)]
        [NUnit.Framework.TestCaseAttribute("Bahamas (the)", "Bahamas (les)", "BS", "BHS", "044", null)]
        [NUnit.Framework.TestCaseAttribute("Bahrain", "Bahreïn", "BH", "BHR", "048", null)]
        [NUnit.Framework.TestCaseAttribute("Bangladesh", "Bangladesh (le)", "BD", "BGD", "050", null)]
        [NUnit.Framework.TestCaseAttribute("Barbados", "Barbade (la)", "BB", "BRB", "052", null)]
        [NUnit.Framework.TestCaseAttribute("Belarus", "Bélarus (le)", "BY", "BLR", "112", null)]
        [NUnit.Framework.TestCaseAttribute("Belgium", "Belgique (la)", "BE", "BEL", "056", null)]
        [NUnit.Framework.TestCaseAttribute("Belize", "Belize (le)", "BZ", "BLZ", "084", null)]
        [NUnit.Framework.TestCaseAttribute("Benin", "Bénin (le)", "BJ", "BEN", "204", null)]
        [NUnit.Framework.TestCaseAttribute("Bermuda", "Bermudes (les)", "BM", "BMU", "060", null)]
        [NUnit.Framework.TestCaseAttribute("Åland Islands", "Åland (les Îles)", "AX", "ALA", "248", null)]
        [NUnit.Framework.TestCaseAttribute("Bhutan", "Bhoutan (le)", "BT", "BTN", "064", null)]
        [NUnit.Framework.TestCaseAttribute("Bolivia (Plurinational State of)", "Bolivie (État plurinational de)", "BO", "BOL", "068", null)]
        [NUnit.Framework.TestCaseAttribute("Bonaire, Sint Eustatius and Saba", "Bonaire, Saint-Eustache et Saba", "BQ", "BES", "535", null)]
        [NUnit.Framework.TestCaseAttribute("Bosnia and Herzegovina", "Bosnie-Herzégovine (la)", "BA", "BIH", "070", null)]
        [NUnit.Framework.TestCaseAttribute("Botswana", "Botswana (le)", "BW", "BWA", "072", null)]
        [NUnit.Framework.TestCaseAttribute("Bouvet Island", "Bouvet (l\'Île)", "BV", "BVT", "074", null)]
        [NUnit.Framework.TestCaseAttribute("Brazil", "Brésil (le)", "BR", "BRA", "076", null)]
        [NUnit.Framework.TestCaseAttribute("British Indian Ocean Territory (the)", "Indien (le Territoire britannique de l\'océan)", "IO", "IOT", "086", null)]
        [NUnit.Framework.TestCaseAttribute("Brunei Darussalam", "Brunéi Darussalam (le)", "BN", "BRN", "096", null)]
        [NUnit.Framework.TestCaseAttribute("Bulgaria", "Bulgarie (la)", "BG", "BGR", "100", null)]
        [NUnit.Framework.TestCaseAttribute("Burkina Faso", "Burkina Faso (le)", "BF", "BFA", "854", null)]
        [NUnit.Framework.TestCaseAttribute("Burundi", "Burundi (le)", "BI", "BDI", "108", null)]
        [NUnit.Framework.TestCaseAttribute("Cabo Verde", "Cabo Verde", "CV", "CPV", "132", null)]
        [NUnit.Framework.TestCaseAttribute("Cambodia", "Cambodge (le)", "KH", "KHM", "116", null)]
        [NUnit.Framework.TestCaseAttribute("Cameroon", "Cameroun (le)", "CM", "CMR", "120", null)]
        [NUnit.Framework.TestCaseAttribute("Canada", "Canada (le)", "CA", "CAN", "124", null)]
        [NUnit.Framework.TestCaseAttribute("Cayman Islands (the)", "Caïmans (les Îles)", "KY", "CYM", "136", null)]
        [NUnit.Framework.TestCaseAttribute("Central African Republic (the)", "République centrafricaine (la)", "CF", "CAF", "140", null)]
        [NUnit.Framework.TestCaseAttribute("Chad", "Tchad (le)", "TD", "TCD", "148", null)]
        [NUnit.Framework.TestCaseAttribute("Chile", "Chili (le)", "CL", "CHL", "152", null)]
        [NUnit.Framework.TestCaseAttribute("China", "Chine (la)", "CN", "CHN", "156", null)]
        [NUnit.Framework.TestCaseAttribute("Christmas Island", "Christmas (l\'Île)", "CX", "CXR", "162", null)]
        [NUnit.Framework.TestCaseAttribute("Cocos (Keeling) Islands (the)", "Cocos (les Îles)/ Keeling (les Îles)", "CC", "CCK", "166", null)]
        [NUnit.Framework.TestCaseAttribute("Colombia", "Colombie (la)", "CO", "COL", "170", null)]
        [NUnit.Framework.TestCaseAttribute("Comoros (the)", "Comores (les)", "KM", "COM", "174", null)]
        [NUnit.Framework.TestCaseAttribute("Congo (the Democratic Republic of the)", "Congo (la République démocratique du)", "CD", "COD", "180", null)]
        [NUnit.Framework.TestCaseAttribute("Congo (the)", "Congo (le)", "CG", "COG", "178", null)]
        [NUnit.Framework.TestCaseAttribute("Cook Islands (the)", "Cook (les Îles)", "CK", "COK", "184", null)]
        [NUnit.Framework.TestCaseAttribute("Costa Rica", "Costa Rica (le)", "CR", "CRI", "188", null)]
        [NUnit.Framework.TestCaseAttribute("Croatia", "Croatie (la)", "HR", "HRV", "191", null)]
        [NUnit.Framework.TestCaseAttribute("Cuba", "Cuba", "CU", "CUB", "192", null)]
        [NUnit.Framework.TestCaseAttribute("Curaçao", "Curaçao", "CW", "CUW", "531", null)]
        [NUnit.Framework.TestCaseAttribute("Cyprus", "Chypre", "CY", "CYP", "196", null)]
        [NUnit.Framework.TestCaseAttribute("Czechia", "Tchéquie (la)", "CZ", "CZE", "203", null)]
        [NUnit.Framework.TestCaseAttribute("Côte d\'Ivoire", "Côte d\'Ivoire (la)", "CI", "CIV", "384", null)]
        [NUnit.Framework.TestCaseAttribute("Denmark", "Danemark (le)", "DK", "DNK", "208", null)]
        [NUnit.Framework.TestCaseAttribute("Djibouti", "Djibouti", "DJ", "DJI", "262", null)]
        [NUnit.Framework.TestCaseAttribute("Dominica", "Dominique (la)", "DM", "DMA", "212", null)]
        [NUnit.Framework.TestCaseAttribute("Dominican Republic (the)", "dominicaine (la République)", "DO", "DOM", "214", null)]
        [NUnit.Framework.TestCaseAttribute("Ecuador", "Équateur (l\')", "EC", "ECU", "218", null)]
        [NUnit.Framework.TestCaseAttribute("Egypt", "Égypte (l\')", "EG", "EGY", "818", null)]
        [NUnit.Framework.TestCaseAttribute("El Salvador", "El Salvador", "SV", "SLV", "222", null)]
        [NUnit.Framework.TestCaseAttribute("Equatorial Guinea", "Guinée équatoriale (la)", "GQ", "GNQ", "226", null)]
        [NUnit.Framework.TestCaseAttribute("Eritrea", "Érythrée (l\')", "ER", "ERI", "232", null)]
        [NUnit.Framework.TestCaseAttribute("Estonia", "Estonie (l\')", "EE", "EST", "233", null)]
        [NUnit.Framework.TestCaseAttribute("Eswatini", "Eswatini (l\')", "SZ", "SWZ", "748", null)]
        [NUnit.Framework.TestCaseAttribute("Ethiopia", "Éthiopie (l\')", "ET", "ETH", "231", null)]
        [NUnit.Framework.TestCaseAttribute("Falkland Islands (the) [Malvinas]", "Falkland (les Îles)/Malouines (les Îles)", "FK", "FLK", "238", null)]
        [NUnit.Framework.TestCaseAttribute("Faroe Islands (the)", "Féroé (les Îles)", "FO", "FRO", "234", null)]
        [NUnit.Framework.TestCaseAttribute("Fiji", "Fidji (les)", "FJ", "FJI", "242", null)]
        [NUnit.Framework.TestCaseAttribute("Finland", "Finlande (la)", "FI", "FIN", "246", null)]
        [NUnit.Framework.TestCaseAttribute("France", "France (la)", "FR", "FRA", "250", null)]
        [NUnit.Framework.TestCaseAttribute("French Guiana", "Guyane française (la)", "GF", "GUF", "254", null)]
        [NUnit.Framework.TestCaseAttribute("French Polynesia", "Polynésie française (la)", "PF", "PYF", "258", null)]
        [NUnit.Framework.TestCaseAttribute("French Southern Territories (the)", "Terres australes françaises (les)", "TF", "ATF", "260", null)]
        [NUnit.Framework.TestCaseAttribute("Gabon", "Gabon (le)", "GA", "GAB", "266", null)]
        [NUnit.Framework.TestCaseAttribute("Gambia (the)", "Gambie (la)", "GM", "GMB", "270", null)]
        [NUnit.Framework.TestCaseAttribute("Georgia", "Géorgie (la)", "GE", "GEO", "268", null)]
        [NUnit.Framework.TestCaseAttribute("Germany", "Allemagne (l\')", "DE", "DEU", "276", null)]
        [NUnit.Framework.TestCaseAttribute("Ghana", "Ghana (le)", "GH", "GHA", "288", null)]
        [NUnit.Framework.TestCaseAttribute("Gibraltar", "Gibraltar", "GI", "GIB", "292", null)]
        [NUnit.Framework.TestCaseAttribute("Greece", "Grèce (la)", "GR", "GRC", "300", null)]
        [NUnit.Framework.TestCaseAttribute("Greenland", "Groenland (le)", "GL", "GRL", "304", null)]
        [NUnit.Framework.TestCaseAttribute("Grenada", "Grenade (la)", "GD", "GRD", "308", null)]
        [NUnit.Framework.TestCaseAttribute("Guadeloupe", "Guadeloupe (la)", "GP", "GLP", "312", null)]
        [NUnit.Framework.TestCaseAttribute("Guam", "Guam", "GU", "GUM", "316", null)]
        [NUnit.Framework.TestCaseAttribute("Guatemala", "Guatemala (le)", "GT", "GTM", "320", null)]
        [NUnit.Framework.TestCaseAttribute("Guernsey", "Guernesey", "GG", "GGY", "831", null)]
        [NUnit.Framework.TestCaseAttribute("Guinea", "Guinée (la)", "GN", "GIN", "324", null)]
        [NUnit.Framework.TestCaseAttribute("Guinea-Bissau", "Guinée-Bissau (la)", "GW", "GNB", "624", null)]
        [NUnit.Framework.TestCaseAttribute("Guyana", "Guyana (le)", "GY", "GUY", "328", null)]
        [NUnit.Framework.TestCaseAttribute("Haiti", "Haïti", "HT", "HTI", "332", null)]
        [NUnit.Framework.TestCaseAttribute("Heard Island and McDonald Islands", "Heard-et-Îles MacDonald (l\'Île)", "HM", "HMD", "334", null)]
        [NUnit.Framework.TestCaseAttribute("Holy See (the)", "Saint-Siège (le)", "VA", "VAT", "336", null)]
        [NUnit.Framework.TestCaseAttribute("Honduras", "Honduras (le)", "HN", "HND", "340", null)]
        [NUnit.Framework.TestCaseAttribute("Hong Kong", "Hong Kong", "HK", "HKG", "344", null)]
        [NUnit.Framework.TestCaseAttribute("Hungary", "Hongrie (la)", "HU", "HUN", "348", null)]
        [NUnit.Framework.TestCaseAttribute("Iceland", "Islande (l\')", "IS", "ISL", "352", null)]
        [NUnit.Framework.TestCaseAttribute("India", "Inde (l\')", "IN", "IND", "356", null)]
        [NUnit.Framework.TestCaseAttribute("Indonesia", "Indonésie (l\')", "ID", "IDN", "360", null)]
        [NUnit.Framework.TestCaseAttribute("Iran (Islamic Republic of)", "Iran (République Islamique d\')", "IR", "IRN", "364", null)]
        [NUnit.Framework.TestCaseAttribute("Iraq", "Iraq (l\')", "IQ", "IRQ", "368", null)]
        [NUnit.Framework.TestCaseAttribute("Ireland", "Irlande (l\')", "IE", "IRL", "372", null)]
        [NUnit.Framework.TestCaseAttribute("Isle of Man", "Île de Man", "IM", "IMN", "833", null)]
        [NUnit.Framework.TestCaseAttribute("Israel", "Israël", "IL", "ISR", "376", null)]
        [NUnit.Framework.TestCaseAttribute("Italy", "Italie (l\')", "IT", "ITA", "380", null)]
        [NUnit.Framework.TestCaseAttribute("Jamaica", "Jamaïque (la)", "JM", "JAM", "388", null)]
        [NUnit.Framework.TestCaseAttribute("Japan", "Japon (le)", "JP", "JPN", "392", null)]
        [NUnit.Framework.TestCaseAttribute("Jersey", "Jersey", "JE", "JEY", "832", null)]
        [NUnit.Framework.TestCaseAttribute("Jordan", "Jordanie (la)", "JO", "JOR", "400", null)]
        [NUnit.Framework.TestCaseAttribute("Kazakhstan", "Kazakhstan (le)", "KZ", "KAZ", "398", null)]
        [NUnit.Framework.TestCaseAttribute("Kenya", "Kenya (le)", "KE", "KEN", "404", null)]
        [NUnit.Framework.TestCaseAttribute("Kiribati", "Kiribati", "KI", "KIR", "296", null)]
        [NUnit.Framework.TestCaseAttribute("Korea (the Democratic People\'s Republic of)", "Corée (la République populaire démocratique de)", "KP", "PRK", "408", null)]
        [NUnit.Framework.TestCaseAttribute("Korea (the Republic of)", "Corée (la République de)", "KR", "KOR", "410", null)]
        [NUnit.Framework.TestCaseAttribute("Kuwait", "Koweït (le)", "KW", "KWT", "414", null)]
        [NUnit.Framework.TestCaseAttribute("Kyrgyzstan", "Kirghizistan (le)", "KG", "KGZ", "417", null)]
        [NUnit.Framework.TestCaseAttribute("Lao People\'s Democratic Republic (the)", "Lao (la République démocratique populaire)", "LA", "LAO", "418", null)]
        [NUnit.Framework.TestCaseAttribute("Latvia", "Lettonie (la)", "LV", "LVA", "428", null)]
        [NUnit.Framework.TestCaseAttribute("Lebanon", "Liban (le)", "LB", "LBN", "422", null)]
        [NUnit.Framework.TestCaseAttribute("Lesotho", "Lesotho (le)", "LS", "LSO", "426", null)]
        [NUnit.Framework.TestCaseAttribute("Liberia", "Libéria (le)", "LR", "LBR", "430", null)]
        [NUnit.Framework.TestCaseAttribute("Libya", "Libye (la)", "LY", "LBY", "434", null)]
        [NUnit.Framework.TestCaseAttribute("Liechtenstein", "Liechtenstein (le)", "LI", "LIE", "438", null)]
        [NUnit.Framework.TestCaseAttribute("Lithuania", "Lituanie (la)", "LT", "LTU", "440", null)]
        [NUnit.Framework.TestCaseAttribute("Luxembourg", "Luxembourg (le)", "LU", "LUX", "442", null)]
        [NUnit.Framework.TestCaseAttribute("Macao", "Macao", "MO", "MAC", "446", null)]
        [NUnit.Framework.TestCaseAttribute("Madagascar", "Madagascar", "MG", "MDG", "450", null)]
        [NUnit.Framework.TestCaseAttribute("Malawi", "Malawi (le)", "MW", "MWI", "454", null)]
        [NUnit.Framework.TestCaseAttribute("Malaysia", "Malaisie (la)", "MY", "MYS", "458", null)]
        [NUnit.Framework.TestCaseAttribute("Maldives", "Maldives (les)", "MV", "MDV", "462", null)]
        [NUnit.Framework.TestCaseAttribute("Mali", "Mali (le)", "ML", "MLI", "466", null)]
        [NUnit.Framework.TestCaseAttribute("Malta", "Malte", "MT", "MLT", "470", null)]
        [NUnit.Framework.TestCaseAttribute("Marshall Islands (the)", "Marshall (les Îles)", "MH", "MHL", "584", null)]
        [NUnit.Framework.TestCaseAttribute("Martinique", "Martinique (la)", "MQ", "MTQ", "474", null)]
        [NUnit.Framework.TestCaseAttribute("Mauritania", "Mauritanie (la)", "MR", "MRT", "478", null)]
        [NUnit.Framework.TestCaseAttribute("Mauritius", "Maurice", "MU", "MUS", "480", null)]
        [NUnit.Framework.TestCaseAttribute("Mayotte", "Mayotte", "YT", "MYT", "175", null)]
        [NUnit.Framework.TestCaseAttribute("Mexico", "Mexique (le)", "MX", "MEX", "484", null)]
        [NUnit.Framework.TestCaseAttribute("Micronesia (Federated States of)", "Micronésie (États fédérés de)", "FM", "FSM", "583", null)]
        [NUnit.Framework.TestCaseAttribute("Moldova (the Republic of)", "Moldova (la République de)", "MD", "MDA", "498", null)]
        [NUnit.Framework.TestCaseAttribute("Monaco", "Monaco", "MC", "MCO", "492", null)]
        [NUnit.Framework.TestCaseAttribute("Mongolia", "Mongolie (la)", "MN", "MNG", "496", null)]
        [NUnit.Framework.TestCaseAttribute("Montenegro", "Monténégro (le)", "ME", "MNE", "499", null)]
        [NUnit.Framework.TestCaseAttribute("Montserrat", "Montserrat", "MS", "MSR", "500", null)]
        [NUnit.Framework.TestCaseAttribute("Morocco", "Maroc (le)", "MA", "MAR", "504", null)]
        [NUnit.Framework.TestCaseAttribute("Mozambique", "Mozambique (le)", "MZ", "MOZ", "508", null)]
        [NUnit.Framework.TestCaseAttribute("Myanmar", "Myanmar (le)", "MM", "MMR", "104", null)]
        [NUnit.Framework.TestCaseAttribute("Namibia", "Namibie (la)", "NA", "NAM", "516", null)]
        [NUnit.Framework.TestCaseAttribute("Nauru", "Nauru", "NR", "NRU", "520", null)]
        [NUnit.Framework.TestCaseAttribute("Nepal", "Népal (le)", "NP", "NPL", "524", null)]
        [NUnit.Framework.TestCaseAttribute("Netherlands (the)", "Pays-Bas (les)", "NL", "NLD", "528", null)]
        [NUnit.Framework.TestCaseAttribute("New Caledonia", "Nouvelle-Calédonie (la)", "NC", "NCL", "540", null)]
        [NUnit.Framework.TestCaseAttribute("New Zealand", "Nouvelle-Zélande (la)", "NZ", "NZL", "554", null)]
        [NUnit.Framework.TestCaseAttribute("Nicaragua", "Nicaragua (le)", "NI", "NIC", "558", null)]
        [NUnit.Framework.TestCaseAttribute("Niger (the)", "Niger (le)", "NE", "NER", "562", null)]
        [NUnit.Framework.TestCaseAttribute("Nigeria", "Nigéria (le)", "NG", "NGA", "566", null)]
        [NUnit.Framework.TestCaseAttribute("Niue", "Niue", "NU", "NIU", "570", null)]
        [NUnit.Framework.TestCaseAttribute("Norfolk Island", "Norfolk (l\'Île)", "NF", "NFK", "574", null)]
        [NUnit.Framework.TestCaseAttribute("North Macedonia", "Macédoine du Nord (la)", "MK", "MKD", "807", null)]
        [NUnit.Framework.TestCaseAttribute("Northern Mariana Islands (the)", "Mariannes du Nord (les Îles)", "MP", "MNP", "580", null)]
        [NUnit.Framework.TestCaseAttribute("Norway", "Norvège (la)", "NO", "NOR", "578", null)]
        [NUnit.Framework.TestCaseAttribute("Oman", "Oman", "OM", "OMN", "512", null)]
        [NUnit.Framework.TestCaseAttribute("Pakistan", "Pakistan (le)", "PK", "PAK", "586", null)]
        [NUnit.Framework.TestCaseAttribute("Palau", "Palaos (les)", "PW", "PLW", "585", null)]
        [NUnit.Framework.TestCaseAttribute("Palestine, State of", "Palestine, État de", "PS", "PSE", "275", null)]
        [NUnit.Framework.TestCaseAttribute("Panama", "Panama (le)", "PA", "PAN", "591", null)]
        [NUnit.Framework.TestCaseAttribute("Papua New Guinea", "Papouasie-Nouvelle-Guinée (la)", "PG", "PNG", "598", null)]
        [NUnit.Framework.TestCaseAttribute("Paraguay", "Paraguay (le)", "PY", "PRY", "600", null)]
        [NUnit.Framework.TestCaseAttribute("Peru", "Pérou (le)", "PE", "PER", "604", null)]
        [NUnit.Framework.TestCaseAttribute("Philippines (the)", "Philippines (les)", "PH", "PHL", "608", null)]
        [NUnit.Framework.TestCaseAttribute("Pitcairn", "Pitcairn", "PN", "PCN", "612", null)]
        [NUnit.Framework.TestCaseAttribute("Poland", "Pologne (la)", "PL", "POL", "616", null)]
        [NUnit.Framework.TestCaseAttribute("Portugal", "Portugal (le)", "PT", "PRT", "620", null)]
        [NUnit.Framework.TestCaseAttribute("Puerto Rico", "Porto Rico", "PR", "PRI", "630", null)]
        [NUnit.Framework.TestCaseAttribute("Qatar", "Qatar (le)", "QA", "QAT", "634", null)]
        [NUnit.Framework.TestCaseAttribute("Romania", "Roumanie (la)", "RO", "ROU", "642", null)]
        [NUnit.Framework.TestCaseAttribute("Russian Federation (the)", "Russie (la Fédération de)", "RU", "RUS", "643", null)]
        [NUnit.Framework.TestCaseAttribute("Rwanda", "Rwanda (le)", "RW", "RWA", "646", null)]
        [NUnit.Framework.TestCaseAttribute("Réunion", "Réunion (La)", "RE", "REU", "638", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Barthélemy", "Saint-Barthélemy", "BL", "BLM", "652", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Helena, Ascension and Tristan da Cunha", "Sainte-Hélène, Ascension et Tristan da Cunha", "SH", "SHN", "654", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Kitts and Nevis", "Saint-Kitts-et-Nevis", "KN", "KNA", "659", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Lucia", "Sainte-Lucie", "LC", "LCA", "662", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Martin (French part)", "Saint-Martin (partie française)", "MF", "MAF", "663", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Pierre and Miquelon", "Saint-Pierre-et-Miquelon", "PM", "SPM", "666", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Vincent and the Grenadines", "Saint-Vincent-et-les Grenadines", "VC", "VCT", "670", null)]
        [NUnit.Framework.TestCaseAttribute("Samoa", "Samoa (le)", "WS", "WSM", "882", null)]
        [NUnit.Framework.TestCaseAttribute("San Marino", "Saint-Marin", "SM", "SMR", "674", null)]
        [NUnit.Framework.TestCaseAttribute("Sao Tome and Principe", "Sao Tomé-et-Principe", "ST", "STP", "678", null)]
        [NUnit.Framework.TestCaseAttribute("Saudi Arabia", "Arabie saoudite (l\')", "SA", "SAU", "682", null)]
        [NUnit.Framework.TestCaseAttribute("Senegal", "Sénégal (le)", "SN", "SEN", "686", null)]
        [NUnit.Framework.TestCaseAttribute("Serbia", "Serbie (la)", "RS", "SRB", "688", null)]
        [NUnit.Framework.TestCaseAttribute("Seychelles", "Seychelles (les)", "SC", "SYC", "690", null)]
        [NUnit.Framework.TestCaseAttribute("Sierra Leone", "Sierra Leone (la)", "SL", "SLE", "694", null)]
        [NUnit.Framework.TestCaseAttribute("Singapore", "Singapour", "SG", "SGP", "702", null)]
        [NUnit.Framework.TestCaseAttribute("Sint Maarten (Dutch part)", "Saint-Martin (partie néerlandaise)", "SX", "SXM", "534", null)]
        [NUnit.Framework.TestCaseAttribute("Slovakia", "Slovaquie (la)", "SK", "SVK", "703", null)]
        [NUnit.Framework.TestCaseAttribute("Slovenia", "Slovénie (la)", "SI", "SVN", "705", null)]
        [NUnit.Framework.TestCaseAttribute("Solomon Islands", "Salomon (les Îles)", "SB", "SLB", "090", null)]
        [NUnit.Framework.TestCaseAttribute("Somalia", "Somalie (la)", "SO", "SOM", "706", null)]
        [NUnit.Framework.TestCaseAttribute("South Africa", "Afrique du Sud (l\')", "ZA", "ZAF", "710", null)]
        [NUnit.Framework.TestCaseAttribute("South Georgia and the South Sandwich Islands", "Géorgie du Sud-et-les Îles Sandwich du Sud (la)", "GS", "SGS", "239", null)]
        [NUnit.Framework.TestCaseAttribute("South Sudan", "Soudan du Sud (le)", "SS", "SSD", "728", null)]
        [NUnit.Framework.TestCaseAttribute("Spain", "Espagne (l\')", "ES", "ESP", "724", null)]
        [NUnit.Framework.TestCaseAttribute("Sri Lanka", "Sri Lanka", "LK", "LKA", "144", null)]
        [NUnit.Framework.TestCaseAttribute("Sudan (the)", "Soudan (le)", "SD", "SDN", "729", null)]
        [NUnit.Framework.TestCaseAttribute("Suriname", "Suriname (le)", "SR", "SUR", "740", null)]
        [NUnit.Framework.TestCaseAttribute("Svalbard and Jan Mayen", "Svalbard et l\'Île Jan Mayen (le)", "SJ", "SJM", "744", null)]
        [NUnit.Framework.TestCaseAttribute("Sweden", "Suède (la)", "SE", "SWE", "752", null)]
        [NUnit.Framework.TestCaseAttribute("Switzerland", "Suisse (la)", "CH", "CHE", "756", null)]
        [NUnit.Framework.TestCaseAttribute("Syrian Arab Republic (the)", "République arabe syrienne (la)", "SY", "SYR", "760", null)]
        [NUnit.Framework.TestCaseAttribute("Taiwan (Province of China)", "Taïwan (Province de Chine)", "TW", "TWN", "158", null)]
        [NUnit.Framework.TestCaseAttribute("Tajikistan", "Tadjikistan (le)", "TJ", "TJK", "762", null)]
        [NUnit.Framework.TestCaseAttribute("Tanzania, the United Republic of", "Tanzanie (la République-Unie de)", "TZ", "TZA", "834", null)]
        [NUnit.Framework.TestCaseAttribute("Thailand", "Thaïlande (la)", "TH", "THA", "764", null)]
        [NUnit.Framework.TestCaseAttribute("Timor-Leste", "Timor-Leste (le)", "TL", "TLS", "626", null)]
        [NUnit.Framework.TestCaseAttribute("Togo", "Togo (le)", "TG", "TGO", "768", null)]
        [NUnit.Framework.TestCaseAttribute("Tokelau", "Tokelau (les)", "TK", "TKL", "772", null)]
        [NUnit.Framework.TestCaseAttribute("Tonga", "Tonga (les)", "TO", "TON", "776", null)]
        [NUnit.Framework.TestCaseAttribute("Trinidad and Tobago", "Trinité-et-Tobago (la)", "TT", "TTO", "780", null)]
        [NUnit.Framework.TestCaseAttribute("Tunisia", "Tunisie (la)", "TN", "TUN", "788", null)]
        [NUnit.Framework.TestCaseAttribute("Turkmenistan", "Turkménistan (le)", "TM", "TKM", "795", null)]
        [NUnit.Framework.TestCaseAttribute("Turks and Caicos Islands (the)", "Turks-et-Caïcos (les Îles)", "TC", "TCA", "796", null)]
        [NUnit.Framework.TestCaseAttribute("Tuvalu", "Tuvalu (les)", "TV", "TUV", "798", null)]
        [NUnit.Framework.TestCaseAttribute("Türkiye", "Türkiye (la)", "TR", "TUR", "792", null)]
        [NUnit.Framework.TestCaseAttribute("Uganda", "Ouganda (l\')", "UG", "UGA", "800", null)]
        [NUnit.Framework.TestCaseAttribute("Ukraine", "Ukraine (l\')", "UA", "UKR", "804", null)]
        [NUnit.Framework.TestCaseAttribute("United Arab Emirates (the)", "Émirats arabes unis (les)", "AE", "ARE", "784", null)]
        [NUnit.Framework.TestCaseAttribute("United Kingdom of Great Britain and Northern Ireland (the)", "Royaume-Uni de Grande-Bretagne et d\'Irlande du Nord (le)", "GB", "GBR", "826", null)]
        [NUnit.Framework.TestCaseAttribute("United States Minor Outlying Islands (the)", "Îles mineures éloignées des États-Unis (les)", "UM", "UMI", "581", null)]
        [NUnit.Framework.TestCaseAttribute("United States of America (the)", "États-Unis d\'Amérique (les)", "US", "USA", "840", null)]
        [NUnit.Framework.TestCaseAttribute("Uruguay", "Uruguay (l\')", "UY", "URY", "858", null)]
        [NUnit.Framework.TestCaseAttribute("Uzbekistan", "Ouzbékistan (l\')", "UZ", "UZB", "860", null)]
        [NUnit.Framework.TestCaseAttribute("Vanuatu", "Vanuatu (le)", "VU", "VUT", "548", null)]
        [NUnit.Framework.TestCaseAttribute("Venezuela (Bolivarian Republic of)", "Venezuela (République bolivarienne du)", "VE", "VEN", "862", null)]
        [NUnit.Framework.TestCaseAttribute("Viet Nam", "Viet Nam (le)", "VN", "VNM", "704", null)]
        [NUnit.Framework.TestCaseAttribute("Virgin Islands (British)", "Vierges britanniques (les Îles)", "VG", "VGB", "092", null)]
        [NUnit.Framework.TestCaseAttribute("Virgin Islands (U.S.)", "Vierges des États-Unis (les Îles)", "VI", "VIR", "850", null)]
        [NUnit.Framework.TestCaseAttribute("Wallis and Futuna", "Wallis-et-Futuna", "WF", "WLF", "876", null)]
        [NUnit.Framework.TestCaseAttribute("Western Sahara", "Sahara occidental (le)", "EH", "ESH", "732", null)]
        [NUnit.Framework.TestCaseAttribute("Yemen", "Yémen (le)", "YE", "YEM", "887", null)]
        [NUnit.Framework.TestCaseAttribute("Zambia", "Zambie (la)", "ZM", "ZMB", "894", null)]
        [NUnit.Framework.TestCaseAttribute("Zimbabwe", "Zimbabwe (le)", "ZW", "ZWE", "716", null)]
        public virtual void Country(string englishshortname, string frenchshortname, string alpha_2Code, string alpha_3Code, string numeric, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("englishshortname", englishshortname);
            argumentsOfScenario.Add("frenchshortname", frenchshortname);
            argumentsOfScenario.Add("alpha-2code", alpha_2Code);
            argumentsOfScenario.Add("alpha-3code", alpha_3Code);
            argumentsOfScenario.Add("numeric", numeric);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Country", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given(string.Format("the Alpha-2 country code is {0}", alpha_2Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.When("I retrieve the country using the Alpha-2 country code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
 testRunner.Then(string.Format("the English short name should be {0}", englishshortname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 7
     testRunner.And(string.Format("the French short name should be {0}", frenchshortname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
  testRunner.And(string.Format("the Alpha-2 code should be {0}", alpha_2Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
  testRunner.And(string.Format("the Alpha-3 code should be {0}", alpha_3Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
  testRunner.And(string.Format("the numeric code should be {0}", numeric), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.Given(string.Format("the Alpha-3 country code is {0}", alpha_3Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.When("I retrieve the country using the Alpha-3 country code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then(string.Format("the English short name should be {0}", englishshortname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
     testRunner.And(string.Format("the French short name should be {0}", frenchshortname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
  testRunner.And(string.Format("the Alpha-2 code should be {0}", alpha_2Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
  testRunner.And(string.Format("the Alpha-3 code should be {0}", alpha_3Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
  testRunner.And(string.Format("the numeric code should be {0}", numeric), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.Given(string.Format("the numeric country code is {0}", numeric), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
 testRunner.When("I retrieve the country using the numeric country code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then(string.Format("the English short name should be {0}", englishshortname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
     testRunner.And(string.Format("the French short name should be {0}", frenchshortname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
  testRunner.And(string.Format("the Alpha-2 code should be {0}", alpha_2Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
  testRunner.And(string.Format("the Alpha-3 code should be {0}", alpha_3Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
  testRunner.And(string.Format("the numeric code should be {0}", numeric), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
